/*
Module: job-kube-state-metrics
Description: Scrapes Kube-State-Metrics, this is a separate scrape job, if you are also using annotation based scraping, you will want to explicitly
             disable kube-state-metrics from being scraped by this module and annotations by setting the following annotation on the kube-state-metrics
             metrics.agent.grafana.com/scrape: "false"
*/
argument "forward_to" {
  // comment = "Must be a list(MetricssReceiver) where collected logs should be forwarded to"
  optional = false
}

argument "app_name" {
  // comment = "The name of the kube-state-metrics app"
  optional = true
  default = "kube-state-metrics"
}

argument "job_label" {
  // comment = "The job label to add for all kube-state-metrics metrics
  optional = true
  default = "integrations/kubernetes/kube-state-metrics"
}

argument "keep_metrics" {
  optional = true
  default = "(up|kube_(daemonset.*|deployment_(metadata_generation|spec_replicas|status_(observed_generation|replicas_(available|updated)))|horizontalpodautoscaler_(spec_(max|min)_replicas|status_(current|desired)_replicas)|job.*|namespace_status_phase|node.*|persistentvolumeclaim_resource_requests_storage_bytes|pod_(container_(info|resource_(limits|requests)|status_(last_terminated_reason|restarts_total|waiting_reason))|info|owner|start_time|status_(phase|reason))|replicaset.*|resourcequota|statefulset.*))"
}

argument "clustering" {
  // comment = "Whether or not clustering should be enabled"
  optional = true
  default = false
}

// kube-state-metrics service discovery
discovery.kubernetes "kube_state_metrics" {
  role = "service"

  selectors {
    role = "service"
    label = "app.kubernetes.io/name=" + argument.app_name.value
  }
}

// kube-state-metrics relabelings (pre-scrape)
discovery.relabel "kube_state_metrics" {
  targets = discovery.kubernetes.kube_state_metrics.targets
  rule {
    source_labels = ["__meta_kubernetes_service_port_name"]
    regex = "http"
    action = "keep"
  }
}

// kube-state-metrics scrape job
prometheus.scrape "kube_state_metrics" {
  job_name   = argument.job_label.value
  targets    = discovery.relabel.kube_state_metrics.output
  scrape_interval = "60s"
  clustering {
    enabled = argument.clustering.value
  }
  forward_to = [prometheus.relabel.kube_state_metrics.receiver]
}

// kube-state-metrics metric relabelings (post-scrape)
prometheus.relabel "kube_state_metrics" {
  rule {
    source_labels = ["__name__"]
    regex = argument.keep_metrics.value
    action = "keep"
  }
  forward_to = argument.forward_to.value
}
