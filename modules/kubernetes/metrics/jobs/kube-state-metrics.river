/*
Module: job-kube-state-metrics
Description: Scrapes Kube-State-Metrics, this is a separate scrape job, if you are also using annotation based scraping, you will want to explicitly
             disable kube-state-metrics from being scraped by this module and annotations by setting the following annotation on the kube-state-metrics
             metrics.agent.grafana.com/scrape: "false"
*/
argument "forward_to" {
  comment = "Must be a list(MetricsReceiver) where collected logs should be forwarded to"
  optional = false
}

argument "namespaces" {
  comment = "The namespaces to look for targets in"
  optional = true
  default = [] // [] is all namespaces
}

argument "selectors" {
  // see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  comment = "The label selectors to use to find matching targets"
  optional = true
  default = [
    "app.kubernetes.io/name=kube-state-metrics",
  ]
}

argument "port_name" {
  comment = "The of the port to scrape metrics from"
  optional = true
  default = "http"
}

argument "job_label" {
  comment = "The job label to add for all kube-state-metrics metrics"
  optional = true
  default = "integrations/kubernetes/kube-state-metrics"
}

argument "keep_metrics" {
  optional = true
  default = "(up|kube_(daemonset.*|deployment_(metadata_generation|spec_replicas|status_(observed_generation|replicas_(available|updated)))|horizontalpodautoscaler_(spec_(max|min)_replicas|status_(current|desired)_replicas)|job.*|namespace_status_phase|node.*|persistentvolumeclaim_resource_requests_storage_bytes|pod_(container_(info|resource_(limits|requests)|status_(last_terminated_reason|restarts_total|waiting_reason))|info|owner|start_time|status_(phase|reason))|replicaset.*|resourcequota|statefulset.*))"
}

argument "scrape_interval" {
  comment = "How often to scrape metrics from the targets"
  optional = true
  default = "60s"
}

argument "max_cache_size" {
  comment = "The maximum number of elements to hold in the relabeling cache.  Only increase if the amount of metrics returned is extremely large, the default will almost always be sufficient."
  optional = true
  default = 100000
}

argument "clustering" {
  comment = "Whether or not clustering should be enabled"
  optional = true
  default = false
}

// kube-state-metrics service discovery
discovery.kubernetes "kube_state_metrics" {
  role = "service"

  selectors {
    role = "service"
    label = join(argument.selectors.value, ",")
  }

  namespaces {
    names = argument.namespaces.value
  }
}

// kube-state-metrics relabelings (pre-scrape)
discovery.relabel "kube_state_metrics" {
  targets = discovery.kubernetes.kube_state_metrics.targets

  rule {
    source_labels = ["__meta_kubernetes_service_port_name"]
    regex = argument.port_name.value
    action = "keep"
  }
}

// kube-state-metrics scrape job
prometheus.scrape "kube_state_metrics" {
  job_name = argument.job_label.value
  forward_to = [prometheus.relabel.kube_state_metrics.receiver]
  targets = discovery.relabel.kube_state_metrics.output
  scrape_interval = argument.scrape_interval.value

  clustering {
    enabled = argument.clustering.value
  }
}

// kube-state-metrics metric relabelings (post-scrape)
prometheus.relabel "kube_state_metrics" {
  forward_to = argument.forward_to.value
  max_cache_size = argument.max_cache_size.value

  // keep only metrics that match the keep_metrics regex
  rule {
    source_labels = ["__name__"]
    regex = argument.keep_metrics.value
    action = "keep"
  }
}
