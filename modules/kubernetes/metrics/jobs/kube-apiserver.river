/*
Module: job-kube-apiserver
Description: Scrapes Kube API Server

Note: Every argument except for "forward_to" is optional, and does have a defined default value.  However, the values for these
      arguments are not defined using the default = " ... " argument syntax, but rather using the coalesce(argument.value, " ... ").
      This is because if the argument passed in from another consuming module is set to null, the default = " ... " syntax will
      does not override the value passed in, where coalesce() will return the first non-null value.
*/
argument "forward_to" {
  comment = "Must be a list(MetricsReceiver) where collected logs should be forwarded to"
  optional = false
}

argument "enabled" {
  comment = "Whether or not the kube-apiserver job should be enabled, this is useful for disabling the job when it is being consumed by other modules in a multi-tenancy environment"
  optional = true
}

argument "namespace" {
  comment = "The namespaces to look for targets in (default: default)"
  optional = true
}

argument "service" {
  comment = "The label to use for the selector (default: kubernetes)"
  optional = true
}

argument "port_name" {
  comment = "The value of the label for the selector (default: https)"
  optional = true
}

argument "job_label" {
  comment = "The job label to add for all kube-apiserver metrics (default: integrations/kubernetes/kube-apiserver)"
  optional = true
}

// drop metrics and les from kube-prometheus
// https://github.com/prometheus-operator/kube-prometheus/blob/main/manifests/kubernetesControlPlane-serviceMonitorApiserver.yaml
argument "drop_metrics" {
  comment = "Regex of metrics to drop (default: see below)"
  optional = true
}

argument "drop_les" {
  comment = "Regex of metric les label values to drop (default: see below)"
  optional = true
}

argument "scrape_interval" {
  comment = "How often to scrape metrics from the targets (default: 60s)"
  optional = true
}

argument "scrape_timeout" {
  comment = "How long before a scrape times out (default: 10s)"
  optional = true
}

argument "max_cache_size" {
  comment = "The maximum number of elements to hold in the relabeling cache (default: 100000).  Only increase if the amount of metrics returned is extremely large, the default will almost always be sufficient"
  optional = true
}

argument "clustering" {
  // Docs: https://grafana.com/docs/agent/latest/flow/concepts/clustering/
  comment = "Whether or not clustering should be enabled (default: false)"
  optional = true
}

// kube-apiserver service discovery
discovery.kubernetes "kube_apiserver" {
  role = "service"

  selectors {
    role = "service"
    field = "metadata.name=" + coalesce(argument.service.value, "kubernetes")
  }

  namespaces {
    names = [coalesce(argument.namespace.value, "default")]
  }
}

// kube-apiserver relabelings (pre-scrape)
discovery.relabel "kube_apiserver" {
  targets = discovery.kubernetes.kube_apiserver.targets

  // drop all targets if enabled is false
  rule {
    target_label = "__enabled"
    replacement = format("%s", coalesce(argument.enabled.value, "true"))
  }
  rule {
    source_labels = ["__enabled"]
    regex = "false"
    action = "drop"
  }

  // only keep targets with a matching port name
  rule {
    source_labels = ["__meta_kubernetes_service_port_name"]
    regex = coalesce(argument.port_name.value, "https")
    action = "keep"
  }

  // set the namespace
  rule {
    action = "replace"
    source_labels = ["__meta_kubernetes_namespace"]
    target_label = "namespace"
  }

  // set the service_name
  rule {
    action = "replace"
    source_labels = ["__meta_kubernetes_service_name"]
    target_label = "service"
  }
}

// kube-apiserver scrape job
prometheus.scrape "kube_apiserver" {
  job_name = coalesce(argument.job_label.value, "integrations/kubernetes/kube-apiserver")
  forward_to = [prometheus.relabel.kube_apiserver.receiver]
  targets = discovery.relabel.kube_apiserver.output
  scheme = "https"
  scrape_interval = coalesce(argument.scrape_interval.value, "60s")
  scrape_timeout = coalesce(argument.scrape_timeout.value, "10s")
  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"

  tls_config {
    ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    insecure_skip_verify = false
    server_name = "kubernetes"
  }

  clustering {
    enabled = coalesce(argument.clustering.value, false)
  }
}

// kube-apiserver metric relabelings (post-scrape)
prometheus.relabel "kube_apiserver" {
  forward_to = argument.forward_to.value
  max_cache_size = coalesce(argument.max_cache_size.value, 100000)

  // drop metrics that match the drop_metrics regex
  rule {
    source_labels = ["__name__"]
    regex = coalesce(argument.drop_metrics.value, "(kubelet_(pod_(worker|start)_latency_microseconds|cgroup_manager_latency_microseconds|pleg_relist_(latency|interval)_microseconds|runtime_operations(_latency_microseconds|_errors)?|eviction_stats_age_microseconds|device_plugin_(registration_count|alloc_latency_microseconds)|network_plugin_operations_latency_microseconds)|scheduler_(e2e_scheduling_latency_microseconds|scheduling_algorithm_(predicate|priority|preemption)_evaluation|scheduling_algorithm_latency_microseconds|binding_latency_microseconds|scheduling_latency_seconds)|apiserver_(request_(count|latencies(_summary)?)|dropped_requests|storage_(data_key_generation|transformation_(failures_total|latencies_microseconds))|proxy_tunnel_sync_latency_secs|longrunning_gauge|registered_watchers)|kubelet_docker_(operations(_latency_microseconds|_errors|_timeout)?)|reflector_(items_per_(list|watch)|list_duration_seconds|lists_total|short_watches_total|watch_duration_seconds|watches_total)|etcd_(helper_(cache_(hit|miss)_count|cache_entry_count|object_counts)|request_(cache_(get|add)_latencies_summary|latencies_summary)|debugging.*|disk.*|server.*)|transformation_(latencies_microseconds|failures_total)|(admission_quota_controller|APIServiceOpenAPIAggregationControllerQueue1|APIServiceRegistrationController|autoregister|AvailableConditionController|crd_(autoregistration_controller|Establishing|finalizer|naming_condition_controller|openapi_controller)|DiscoveryController|non_structural_schema_condition_controller|kubeproxy_sync_proxy_rules|rest_client_request_latency|storage_operation_(errors_total|status_count))(_.*)|apiserver_admission_(controller_admission|step_admission)_latencies_seconds_.*)")
    action = "drop"
  }

  // drop metrics whose name and le label match the drop_les regex
  rule {
    source_labels = [
      "__name__",
      "le",
    ]
    regex = coalesce(argument.drop_les.value, "apiserver_request_duration_seconds_bucket;(0.15|0.25|0.3|0.35|0.4|0.45|0.6|0.7|0.8|0.9|1.25|1.5|1.75|2.5|3|3.5|4.5|6|7|8|9|15|25|30|50)")
    action = "drop"
  }
}
