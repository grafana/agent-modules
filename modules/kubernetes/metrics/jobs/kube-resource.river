/*
Module: job-kube-resources
Description: Scrapes Kube Resources Metrics

Note: Every argument except for "forward_to" is optional, and does have a defined default value.  However, the values for these
      arguments are not defined using the default = " ... " argument syntax, but rather using the coalesce(argument.value, " ... ").
      This is because if the argument passed in from another consuming module is set to null, the default = " ... " syntax will
      does not override the value passed in, where coalesce() will return the first non-null value.
*/
argument "forward_to" {
  // comment = "Must be a list(MetricssReceiver) where collected logs should be forwarded to"
  optional = false
}

argument "enabled" {
  comment = "Whether or not the kube-resource job should be enabled, this is useful for disabling the job when it is being consumed by other modules in a multi-tenancy environment"
  optional = true
}

argument "job_label" {
  comment = "The job label to add for all kube metrics (default: integrations/kubernetes/kube-resources)"
  optional = true
}

argument "keep_metrics" {
  comment = "A regex of metrics to keep (default: see below)"
  optional = true
}

argument "scrape_interval" {
  comment = "How often to scrape metrics from the targets (default: 60s)"
  optional = true
}

argument "max_cache_size" {
  comment = "The maximum number of elements to hold in the relabeling cache (default: 100000).  Only increase if the amount of metrics returned is extremely large, the default will almost always be sufficient"
  optional = true
}

argument "clustering" {
  // Docs: https://grafana.com/docs/agent/latest/flow/concepts/clustering/
  comment = "Whether or not clustering should be enabled (default: false)"
  optional = true
}

// kube resource service discovery
discovery.kubernetes "kube_resource" {
  role = "node"
}

// kube resource relabelings (pre-scrape)
discovery.relabel "kube_resource" {
  targets = discovery.kubernetes.kube_resource.targets

  // drop all targets if enabled is false
  rule {
    target_label = "__enabled"
    replacement = format("%s", coalesce(argument.enabled.value, "true"))
  }
  rule {
    source_labels = ["__enabled"]
    regex = "false"
    action = "drop"
  }

  // set the address to use the kubernetes service dns name
  rule {
    target_label = "__address__"
    replacement  = "kubernetes.default.svc.cluster.local:443"
  }

  // set the metrics path to use the proxy path to the nodes resource metrics endpoint
  rule {
    action = "replace"
    source_labels = ["__meta_kubernetes_node_name"]
    regex = "(.+)"
    replacement = "/api/v1/nodes/${1}/proxy/metrics/resource"
    target_label = "__metrics_path__"
  }
}

// kube resource scrape job
prometheus.scrape "kube_resource" {
  job_name = coalesce(argument.job_label.value, "integrations/kubernetes/kube-resources")
  forward_to = [prometheus.relabel.kube_resource.receiver]
  targets = discovery.relabel.kube_resource.output
  scheme = "https"
  scrape_interval = coalesce(argument.scrape_interval.value, "60s")
  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"

  tls_config {
    ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    insecure_skip_verify = false
    server_name = "kubernetes"
  }

  clustering {
    enabled = coalesce(argument.clustering.value, false)
  }

}

// kube resource metric relabelings (post-scrape)
prometheus.relabel "kube_resource" {
  forward_to = argument.forward_to.value
  max_cache_size = coalesce(argument.max_cache_size.value, 100000)

  // keep only metrics that match the keep_metrics regex
  rule {
    source_labels = ["__name__"]
    regex = coalesce(argument.keep_metrics.value, "(.+)")
    action = "keep"
  }
}
