/*
Module: job-kube-probes
Description: Scrapes Kube Probes Metrics
*/
argument "forward_to" {
  comment = "Must be a list(MetricsReceiver) where collected logs should be forwarded to"
  optional = false
}

argument "job_label" {
  comment = "The job label to add for all kube metrics"
  optional = true
  default = "integrations/kubernetes/kube-probes"
}

argument "keep_metrics" {
  comment = "A regex of metrics to keep"
  optional = true
  default = "(.+)"
}

argument "scrape_interval" {
  comment = "How often to scrape metrics from the targets"
  optional = true
  default = "60s"
}

argument "max_cache_size" {
  comment = "The maximum number of elements to hold in the relabeling cache.  Only increase if the amount of metrics returned is extremely large, the default will almost always be sufficient."
  optional = true
  default = 100000
}

argument "clustering" {
  comment = "Whether or not clustering should be enabled"
  optional = true
  default = false
}

// kube probes service discovery
discovery.kubernetes "kube_probes" {
  role = "node"
}

// kube probes relabelings (pre-scrape)
discovery.relabel "kube_probes" {
  targets = discovery.kubernetes.kube_probes.targets

  rule {
    target_label = "__address__"
    replacement  = "kubernetes.default.svc.cluster.local:443"
  }

  // set the path to use for kube-probes
  rule {
    action = "replace"
    source_labels = ["__meta_kubernetes_node_name"]
    regex = "(.+)"
    replacement = "/api/v1/nodes/${1}/proxy/metrics/probes"
    target_label = "__metrics_path__"
  }
}

// kube probes scrape job
prometheus.scrape "kube_probes" {
  job_name = argument.job_label.value
  forward_to = [prometheus.relabel.kube_probes.receiver]
  targets = discovery.relabel.kube_probes.output
  scheme = "https"
  scrape_interval = argument.scrape_interval.value
  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"

  tls_config {
    ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    insecure_skip_verify = false
    server_name = "kubernetes"
  }

  clustering {
    enabled = argument.clustering.value
  }

}

// kube probes metric relabelings (post-scrape)
prometheus.relabel "kube_probes" {
  forward_to = argument.forward_to.value
  max_cache_size = argument.max_cache_size.value

  // keep only metrics that match the keep_metrics regex
  rule {
    source_labels = ["__name__"]
    regex = argument.keep_metrics.value
    action = "keep"
  }
}
