/*
Module: job-prometheus operators
Description: Ingests Prometheus Operator ServiceMonitors, PodMonitors, and Probes
*/
argument "forward_to" {
  // comment = "Must be a list(MetricssReceiver) where collected logs should be forwarded to"
  optional = false
}

argument "scrape_interval" {
  // comment = "How often to scrape metrics from the targets"
  optional = true
  default = "60s"
}

argument "clustering" {
  // comment = "Whether or not clustering should be enabled"
  optional = true
  default = false
}

argument "namespaces" {
  // comment = "List of namespaces to search for prometheus operator resources in"
  optional = true
  default = []
}

argument "servicemonitor_namespaces" {
  // comment = "List of namespaces to search for just servicemonitors resources in"
  optional = true
  default = []
}

argument "podmonitor_namespaces" {
  // comment = "List of namespaces to search for just podmonitors resources in"
  optional = true
  default = []
}

argument "probe_namespaces" {
  // comment = "List of namespaces to search for just probes resources in"
  optional = true
  default = []
}

// Prometheus Operator ServiceMonitor objects
prometheus.operator.servicemonitors "service_monitors" {
  namespaces = concat(argument.namespaces.value, argument.servicemonitor_namespaces.value)
  forward_to = argument.forward_to.value

  clustering {
    enabled = argument.clustering.value
  }

  scrape {
    default_scrape_interval = argument.scrape_interval.value
  }
}

// Prometheus Operator PodMonitor objects
prometheus.operator.podmonitors "pod_monitors" {
  namespaces = concat(argument.namespaces.value, argument.podmonitor_namespaces.value)
  forward_to = argument.forward_to.value

  clustering {
    enabled = argument.clustering.value
  }

  scrape {
    default_scrape_interval = argument.scrape_interval.value
  }
}

// Prometheus Operator Probe objects
prometheus.operator.probes "probes" {
  namespaces = concat(argument.namespaces.value, argument.probe_namespaces.value)
  forward_to = argument.forward_to.value

  clustering {
    enabled = argument.clustering.value
  }

  scrape {
    default_scrape_interval = argument.scrape_interval.value
  }
}
