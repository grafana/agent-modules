/*
Module: job-prometheus operators
Description: Ingests Prometheus Operator ServiceMonitors, PodMonitors, and Probes

Note: Every argument except for "forward_to" is optional, and does have a defined default value.  However, the values for these
      arguments are not defined using the default = " ... " argument syntax, but rather using the coalesce(argument.value, " ... ").
      This is because if the argument passed in from another consuming module is set to null, the default = " ... " syntax will
      does not override the value passed in, where coalesce() will return the first non-null value.
*/
argument "forward_to" {
  comment = "Must be a list(MetricsReceiver) where collected logs should be forwarded to"
  optional = false
}

argument "scrape_interval" {
  comment = "How often to scrape metrics from the targets (default: 60s)"
  optional = true
}

argument "clustering" {
  // Docs: https://grafana.com/docs/agent/latest/flow/concepts/clustering/
  comment = "Whether or not clustering should be enabled (default: false)"
  optional = true
}

argument "namespaces" {
  comment = "List of namespaces to search for prometheus operator resources in (default: [] all namespaces)"
  optional = true
}

argument "servicemonitor_namespaces" {
  comment = "List of namespaces to search for just servicemonitors resources in (default: [] all namespaces)"
  optional = true
}

argument "podmonitor_namespaces" {
  comment = "List of namespaces to search for just podmonitors resources in (default: [] all namespaces)"
  optional = true
}

argument "probe_namespaces" {
  comment = "List of namespaces to search for just probes resources in (default: [] all namespaces)"
  optional = true
}

// Prometheus Operator ServiceMonitor objects
prometheus.operator.servicemonitors "service_monitors" {
  namespaces = concat(argument.namespaces.value, argument.servicemonitor_namespaces.value)
  forward_to = argument.forward_to.value

  clustering {
    enabled = coalesce(argument.clustering.value, false)
  }

  scrape {
    default_scrape_interval = coalesce(argument.scrape_interval.value, "60s")
  }
}

// Prometheus Operator PodMonitor objects
prometheus.operator.podmonitors "pod_monitors" {
  namespaces = concat(argument.namespaces.value, argument.podmonitor_namespaces.value)
  forward_to = argument.forward_to.value

  clustering {
    enabled = coalesce(argument.clustering.value, false)
  }

  scrape {
    default_scrape_interval = coalesce(argument.scrape_interval.value, "60s")
  }
}

// Prometheus Operator Probe objects
prometheus.operator.probes "probes" {
  namespaces = concat(argument.namespaces.value, argument.probe_namespaces.value)
  forward_to = argument.forward_to.value

  clustering {
    enabled = coalesce(argument.clustering.value, false)
  }

  scrape {
    default_scrape_interval = coalesce(argument.scrape_interval.value, "60s")
  }
}
