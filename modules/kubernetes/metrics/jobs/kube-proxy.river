/*
Module: job-kube-proxy
Description: Kube Proxy
*/
argument "forward_to" {
  // comment = "Must be a list(MetricssReceiver) where collected logs should be forwarded to"
  optional = false
}

argument "namespace" {
  // comment = "The namespace to look for targets in"
  optional = true
  default = "kube-system"
}

argument "app_label" {
  // comment = "The label to use for the selector"
  optional = true
  default = "component"
}

argument "app_value" {
  // comment = "The value of the label for the selector"
  optional = true
  default = "kube-proxy"
}

argument "port" {
  // comment = "The port to scrape kube-proxy metrics on"
  optional = true
  default = "10249"
}

argument "job_label" {
  // comment = "The job label to add for all kube-proxy metrics
  optional = true
  default = "integrations/kubernetes/kube-proxy"
}

argument "keep_metrics" {
  optional = true
  default = "(.+)"
}

argument "clustering" {
  // comment = "Whether or not clustering should be enabled"
  optional = true
  default = false
}

// kube-proxy service discovery for all of the pods in the kube_proxy daemonset
discovery.kubernetes "kube_proxy" {
  role = "pod"

  selectors {
    role = "pod"
    label = "app.kubernetes.io/" + argument.app_label.value + "=" + argument.app_value.value
  }

  namespaces {
    names = [argument.namespace.value]
  }
}

// kube_proxy relabelings (pre-scrape)
discovery.relabel "kube_proxy" {
  targets = discovery.kubernetes.kube_proxy.targets

  rule {
    source_labels = ["__address__"]
    replacement = "$1:" + format("%s", argument.port.value)
    target_label = "__address__"
  }
}

// kube_proxy scrape job
prometheus.scrape "kube_proxy" {
  job_name   = argument.job_label.value
  targets    = discovery.relabel.kube_proxy.output
  scrape_interval = "60s"
  clustering {
    enabled = argument.clustering.value
  }
  forward_to = [prometheus.relabel.kube_proxy.receiver]
}

// kube-proxy metric relabelings (post-scrape)
prometheus.relabel "kube_proxy" {
  forward_to = argument.forward_to.value

  // keep only certain metrics
  rule {
    source_labels = ["__name__"]
    regex = argument.keep_metrics.value
    action = "keep"
  }
}
