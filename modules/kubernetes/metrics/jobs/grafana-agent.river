/*
Module: job-grafana-agent
Description: Scrapes grafana agent
*/
argument "forward_to" {
  // comment = "Must be a list(MetricssReceiver) where collected logs should be forwarded to"
  optional = false
}

argument "namespaces" {
  comment = "The namespaces to look for targets in"
  optional = true
  default = [] // [] is all namespaces
}

argument "selectors" {
  // see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  comment = "The label selectors to use to find matching targets"
  optional = true
  default = [
    "app.kubernetes.io/name=grafana-agent",
  ]
}

argument "port_name" {
  comment = "The of the port to scrape metrics from"
  optional = true
  default = "http-metrics"
}

argument "job_label" {
  // comment = "The job label to add for all grafana-agent metrics
  optional = true
  default = "integrations/agent"
}

argument "keep_metrics" {
  optional = true
  default = "(up|agent_build_info|log_.+)"
}

argument "scrape_interval" {
  comment = "How often to scrape metrics from the targets"
  optional = true
  default = "60s"
}

argument "max_cache_size" {
  comment = "The maximum number of elements to hold in the relabeling cache.  This should only be increased if the amount of metrics returned is extremely large, the default will almost always be sufficient."
  optional = true
  default = 100000
}

argument "clustering" {
  comment = "Whether or not clustering should be enabled"
  optional = true
  default = false
}

// grafana agent service discovery for all of the pods in the grafana agent daemonset
discovery.kubernetes "agent" {
  role = "pod"

  selectors {
    role = "pod"
    label = join(argument.selectors.value, ",")
  }

  namespaces {
    names = argument.namespaces.value
  }
}

// grafana agent relabelings (pre-scrape)
discovery.relabel "agent" {
  targets = discovery.kubernetes.agent.targets

  // keep only the specified metrics port name, and pods that are Running and ready
  rule {
    source_labels = [
      "__meta_kubernetes_pod_container_port_name",
      "__meta_kubernetes_pod_phase",
      "__meta_kubernetes_pod_ready",
    ]
    separator = "@"
    regex = argument.port_name.value + "@Running@true"
    action = "keep"
  }

  // set the namespace label
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    target_label  = "namespace"
  }

  // set the pod label
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    target_label  = "pod"
  }

  // set the container label
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    target_label  = "container"
  }

  // set a controller label
  rule {
    source_labels = [
      "__meta_kubernetes_pod_controller_kind",
      "__meta_kubernetes_pod_controller_name",
    ]
    separator = "/"
    target_label  = "controller"
  }

  // set the app name if specified as metadata labels "app:" or "app.kubernetes.io/name:" or "k8s-app:"
  rule {
    action = "replace"
    source_labels = [
      "__meta_kubernetes_pod_label_app_kubernetes_io_name",
      "__meta_kubernetes_pod_label_k8s_app",
      "__meta_kubernetes_pod_label_app",
    ]
    regex = "^(?:;*)?([^;]+).*$"
    replacement = "$1"
    target_label = "app"
  }
}

// grafana agent scrape job
prometheus.scrape "agent" {
  job_name = argument.job_label.value
  forward_to = [prometheus.relabel.agent.receiver]
  targets = discovery.relabel.agent.output
  scrape_interval = argument.scrape_interval.value

  clustering {
    enabled = argument.clustering.value
  }
}

// grafana-agent metric relabelings (post-scrape)
prometheus.relabel "agent" {
  forward_to = argument.forward_to.value
  max_cache_size = argument.max_cache_size.value

  // keep only certain metrics
  rule {
    source_labels = ["__name__"]
    regex = argument.keep_metrics.value
    action = "keep"
  }

  // remove the component_id label from any metric that starts with log_bytes or log_lines, these are custom metrics that are generated
  // as part of the log annotation modules in this repo
  rule {
    action = "replace"
    source_labels = ["__name__"]
    regex = "^log_(bytes|lines).+"
    replacement = ""
    target_label = "component_id"
  }

  // set the namespace label to that of the exported_namespace
  rule {
    action = "replace"
    source_labels = ["__name__", "exported_namespace"]
    separator = "@"
    regex = "^log_(bytes|lines).+@(.+)"
    replacement = "$2"
    target_label = "namespace"
  }

  // set the pod label to that of the exported_pod
  rule {
    action = "replace"
    source_labels = ["__name__", "exported_pod"]
    separator = "@"
    regex = "^log_(bytes|lines).+@(.+)"
    replacement = "$2"
    target_label = "pod"
  }

  // set the container label to that of the exported_container
  rule {
    action = "replace"
    source_labels = ["__name__", "exported_container"]
    separator = "@"
    regex = "^log_(bytes|lines).+@(.+)"
    replacement = "$2"
    target_label = "container"
  }

  // set the job label to that of the exported_job
  rule {
    action = "replace"
    source_labels = ["__name__", "exported_job"]
    separator = "@"
    regex = "^log_(bytes|lines).+@(.+)"
    replacement = "$2"
    target_label = "job"
  }

  // set the instance label to that of the exported_instance
  rule {
    action = "replace"
    source_labels = ["__name__", "exported_instance"]
    separator = "@"
    regex = "^log_(bytes|lines).+@(.+)"
    replacement = "$2"
    target_label = "instance"
  }

  rule {
    action = "labeldrop"
    regex = "exported_(namespace|pod|container|job|instance)"
  }
}
