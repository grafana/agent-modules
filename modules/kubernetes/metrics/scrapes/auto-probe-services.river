/*
Module: probe-services
Description:
  Kubernetes Service Auto-Probing
  ------------------------------------------------------------------------------------------------------------------------------------
  Each port attached to an service is an eligible target, oftentimes service will have multiple ports.
  There may be instances when you want to probe all ports or some ports and not others. To support this
  the following annotations are available:

  only probe services with probe set to true, this can be single valued i.e. probe all ports for
  the service:

  probes.agent.grafana.com/probe: true
  prometheus.io/probe: true

  the default probing scheme is "", this can be specified as a single value which would override,
  if using HTTP prober specify "http" or "https":

  probes.agent.grafana.com/scheme: https
  prometheus.io/scheme: https

  the default path to probe is /metrics, this can be specified as a single value which would override,
  the probe path being used for all ports attached to the service:

  probes.agent.grafana.com/path: /metrics/some_path
  prometheus.io/path: /metrics/some_path

  the default module to use for probing the default value is "unknown" as the modules are defined are in your blackbox exporter
  configuration file, this can be specified as a single value which would override, the probe module being used for all ports
  attached to the service:

  probes.agent.grafana.com/module: http_2xx
  prometheus.io/module: http_2xx

  the default port to probe is the service port, this can be specified as a single value which would
  override the probe port being used for all ports attached to the service, note that even if aan service had
  multiple targets, the relabel_config targets are deduped before scraping:

  probes.agent.grafana.com/port: 8080
  prometheus.io/port: 8080

  the value to set for the job label, by default this would be "integrations/blackbox_exporter" if not specified:

  probes.agent.grafana.com/job: blackbox-exporter
  prometheus.io/job: blackbox-exporter

  the default interval to probe is 1m, this can be specified as a single value which would override,
  the probe interval being used for all ports attached to the service:

  probes.agent.grafana.com/interval: 5m
  prometheus.io/interval: 5m

  the default timeout for scraping is 10s, this can be specified as a single value which would override,
  the probe interval being used for all ports attached to the service:

  probes.agent.grafana.com/timeout: 30s
  prometheus.io/timeout: 30s
*/
argument "forward_to" {
  // comment = "Must be a list(MetricssReceiver) where collected logs should be forwarded to"
  optional = false
}

argument "scrape_interval" {
  // comment = "How frequently to scrape the targets of this scrape configuration."
  optional = true
  default = "60s"
}

argument "blackbox_url" {
  // comment = "The address of the blackbox exporter to use (without the protocol), only the hostname and port i.e. blackbox-prometheus-blackbox-exporter.default.svc.cluster.local:9115"
  optional = false
}

argument "tenant" {
  // comment = "The tenant to filter logs to.  This does not have to be the tenantId, this is the value to look for in the logs.agent.grafana.com/tenant annotation, and this can be a regex."
  optional = true
  default = ".*"
}

argument "clustering" {
  // comment = "Whether or not clustering should be enabled"
  optional = true
  default = false
}

argument "drop_metrics" {
  optional = true
  // blackbox does not return that many metrics, however if certain metrics should be dropped they can be specified here
  // the default is "none" which will not match any of the returned metric names
  default = "probe_ip_addr_hash"
  // comment = "Regex of metrics to drop"
}

argument "git_repo" {
  optional = true
  default = coalesce(env("GIT_REPO"), "https://github.com/grafana/agent-modules.git")
}

argument "git_rev" {
  optional = true
  default = coalesce(env("GIT_REV"), env("GIT_REVISION"), env("GIT_BRANCH"), "main")
}

argument "git_pull_freq" {
  optional = true
  default = "0s"
}

module.git "service_targets" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/targets/services.river"

  arguments {
    tenant = argument.tenant.value
    prober_url = argument.blackbox_url.value
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

prometheus.scrape "probe_services" {
  targets = module.git.service_targets.exports.relabelings.output
  forward_to = [module.git.relabelings_blackbox.exports.metric_relabelings.receiver]
  scrape_interval = argument.scrape_interval.value

  clustering {
    enabled = argument.clustering.value
  }
}

// metric relabelings
module.git "relabelings_blackbox" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/relabelings/blackbox.river"

  arguments {
    forward_to = argument.forward_to.value
    drop_metrics = argument.drop_metrics.value
  }
}
