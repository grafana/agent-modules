/*
Module: scrape-kubelet
Description: Scrapes Kublet Metrics
*/
argument "forward_to" {
  // comment = "Where to send the results to"
  optional = false
}

argument "tenant" {
  // comment = "The tenant to filter logs to.  This does not have to be the tenantId, this is the value to look for in the logs.agent.grafana.com/tenant annotation, and this can be a regex."
  optional = true
  default = ".*"
}

argument "keep_metrics" {
  // comment = "Regex of metrics to keep, see ../relabelings/kubelet.river for the default value"
  optional = true
}

argument "clustering" {
  // comment = "Whether or not clustering should be enabled"
  optional = true
  default = false
}

argument "git_repo" {
  optional = true
  default = coalesce(env("GIT_REPO"), "https://github.com/grafana/agent-modules.git")
}

argument "git_rev" {
  optional = true
  default = coalesce(env("GIT_REV"), env("GIT_REVISION"), env("GIT_BRANCH"), "main")
}

argument "git_pull_freq" {
  optional = true
  default = "5m"
}

module.git "node_targets" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/targets/nodes.river"

  arguments {
    tenant = argument.tenant.value
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

discovery.relabel "kubelet" {
  targets = module.git.node_targets.exports.relabelings.output

  // set the path to use for kubelet
  rule {
    action = "replace"
    source_labels = ["__meta_kubernetes_node_name"]
    regex = "(.+)"
    replacement = "/api/v1/nodes/${1}/proxy/metrics"
    target_label = "__metrics_path__"
  }

}

prometheus.scrape "kubelet" {
  targets = discovery.relabel.kubelet.output
  scheme = "https"
  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
  forward_to = [module.git.relabelings_kubelet.exports.metric_relabelings.receiver]

  tls_config {
    ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    insecure_skip_verify = false
    server_name = "kubernetes"
  }

  clustering {
    enabled = argument.clustering.value
  }
}

// metric relabelings
module.git "relabelings_kubelet" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/relabelings/kubelet.river"

  arguments {
    forward_to = argument.forward_to.value
    keep_metrics = argument.keep_metrics.value
  }
}
