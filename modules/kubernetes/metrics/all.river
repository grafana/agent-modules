/*
Module: metrics-all
Description: Wrapper module to include all kubernetes metric modules and use cri parsing
*/

argument "mimir_url" {
  // comment = "The full URL address of mimir including the protocol, host and path i.e. https://example.com/api/prom/push"
  optional = false
}

argument "mimir_username" {
  // comment = "The mimir Username / Tenant ID"
  optional = false
}

argument "mimir_password" {
  // comment = "The mimir Password / Token for the Tenant"
  optional = true
  default = ""
}

argument "label_cluster" {
  // comment = "Static cluster label to add to all collected metrics"
  optional = true
  default = ""
}

argument "label_env" {
  // comment = "Static env label to add to all collected metrics"
  optional = true
  default = ""
}

argument "label_region" {
  // comment = "Static region label to add to all collected metrics"
  optional = true
  default = ""
}

argument "scrape_port_named_metrics" {
  // comment = "Whether or not to automatically scrape endpoints that have a port with 'metrics' in the name"
  optional = true
  default = false
}

argument "keep_ksm_nex_metrics" {
  // comment = "Regex of metrics to keep, see relabelings/kube-state-metrics.river, relabelings/node-exporter.river for the default value"
  optional = true
}

argument "keep_kubelet_metrics" {
  // comment = "Regex of metrics to keep, see relabelings/kubelet.river for the default value"
  optional = true
}

argument "keep_cadvisor_metrics" {
  // comment = "Regex of metrics to keep, see relabelings/kubelet-cadvisor.river for the default value"
  optional = true
}

argument "drop_apiserver_metrics" {
  // comment = "Regex of metrics to drop, see relabelings/kube-apiserver.river for the default value"
  optional = true
}

argument "clustering" {
  // comment = "Whether or not clustering should be enabled"
  optional = true
  default = false
}

argument "blackbox_url" {
  // comment = "The address of the blackbox exporter to use (without the protocol), only the hostname and port i.e. blackbox-prometheus-blackbox-exporter.default.svc.cluster.local:9115"
  optional = true
  default = ""
}

argument "drop_metrics" {
  optional = true
  // blackbox does not return that many metrics, however if certain metrics should be dropped they can be specified here
  // the default is "none" which will not match any of the returned metric names
  default = "probe_ip_addr_hash"
  // comment = "Regex of metrics to drop"
}

argument "tenant" {
  // comment = "The tenant to filter logs to.  This does not have to be the tenantId, this is the value to look for in the logs.agent.grafana.com/tenant annotation, and this can be a regex."
  optional = true
  default = ".*"
}

argument "git_repo" {
  optional = true
  default = coalesce(env("GIT_REPO"), "https://github.com/grafana/agent-modules.git")
}

argument "git_rev" {
  optional = true
  default = coalesce(env("GIT_REV"), env("GIT_REVISION"), env("GIT_BRANCH"), "main")
}

argument "git_pull_freq" {
  optional = true
  default = "5m"
}

export "prometheus_remote" {
  value = prometheus.remote_write.destination
}

module.git "scrape_kubelet_cadvisor" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/scrapes/kubelet-cadvisor.river"

  arguments {
    forward_to = [prometheus.remote_write.destination.receiver]
    tenant = argument.tenant.value
    keep_metrics = argument.keep_cadvisor_metrics.value
    clustering = argument.clustering.value
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

module.git "scrape_kubelet" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/scrapes/kubelet.river"

  arguments {
    forward_to = [prometheus.remote_write.destination.receiver]
    tenant = argument.tenant.value
    keep_metrics = argument.keep_kubelet_metrics.value
    clustering = argument.clustering.value
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

module.git "scrape_kubelet_probes" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/scrapes/kubelet-probes.river"

  arguments {
    forward_to = [prometheus.remote_write.destination.receiver]
    tenant = argument.tenant.value
    clustering = argument.clustering.value
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

module.git "scrape_kube_apiserver" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/scrapes/kube-apiserver.river"

  arguments {
    forward_to = [prometheus.remote_write.destination.receiver]
    tenant = argument.tenant.value
    drop_metrics = argument.drop_apiserver_metrics.value
    clustering = argument.clustering.value
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

module.git "scrape_endpoints" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/scrapes/auto-scrape-endpoints.river"

  arguments {
    forward_to = [prometheus.remote_write.destination.receiver]
    tenant = argument.tenant.value
    keep_metrics = argument.keep_ksm_nex_metrics.value
    clustering = argument.clustering.value
    scrape_port_named_metrics = argument.scrape_port_named_metrics.value
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

module.git "probe_services" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/scrapes/auto-probe-services.river"

  arguments {
    forward_to = [prometheus.remote_write.destination.receiver]
    tenant = argument.tenant.value
    clustering = argument.clustering.value
    blackbox_url = argument.blackbox_url.value
    drop_metrics = argument.drop_metrics.value
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

module.git "probe_ingresses" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/scrapes/auto-probe-ingresses.river"

  arguments {
    forward_to = [prometheus.remote_write.destination.receiver]
    tenant = argument.tenant.value
    clustering = argument.clustering.value
    blackbox_url = argument.blackbox_url.value
    drop_metrics = argument.drop_metrics.value
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

prometheus.remote_write "destination" {
  endpoint {
    url = argument.mimir_url.value

    basic_auth {
      username = argument.mimir_username.value
      password = argument.mimir_password.value
    }

    write_relabel_config {
			replacement = argument.label_cluster.value
			target_label  = "cluster"
		}

    write_relabel_config {
			replacement = argument.label_env.value
			target_label  = "env"
		}

    write_relabel_config {
			replacement = argument.label_region.value
			target_label  = "region"
		}
  }
}
