/*
Module: metrics-all
Description: Wrapper module to include all kubernetes metric modules

The module is a wrapper around a subset of the available jobs, and is intended to be used as a starting point for configuring the
agent to collect metrics from a Kubernetes cluster. The following jobs are included by default:

- cadvisor
- kubelet
- kube-state-metrics
- node-exporter
- agent
- opencost

Each scrape job has a single argument that is a dictionary, and all arguments are optional. The arguments are passed to the underlying
module, and the full list of arguments can be found in the module for each job. For example, the cadvisor job has the following arguments:

- enabled
- job_label
- keep_metrics
- scrape_interval
- max_cache_size

When calling this module 0 or more of these arguments can be passed as a dictionary to the cadvisor argument. For example, to enable the
cadvisor job and set the scrape interval to 15 seconds, the following can be used:

```
module.git "po" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision   = "main"
  path       = "modules/kubernetes/metrics/all.river"
  pull_frequency = "60s"

  arguments {
    forward_to = [
      prometheus.remote_write.grafana_cloud.receiver,
    ]
    clustering = false
    cadvisor = {
      enabled = true
      scrape_interval = "15s"
    }
  }
}
```

*/
argument "forward_to" {
  comment = "Must be a list(MetricsReceiver) where collected logs should be forwarded to"
	optional = false
}

// cadvisor arguments
argument "cadvisor" {
  comment = "cAdvisor arguments passed a a dictionary, see the module ./jobs/cadvisor.river for complete list of arguments (default: {})"
  optional = true
  default = {}
}

// kubelet arguments
argument "kubelet" {
  comment = "kubelet arguments passed a a dictionary, see the module ./jobs/kubelet.river for complete list of arguments (default: {})"
  optional = true
  default = {}
}

// kube_state_metrics arguments
argument "kube_state_metrics" {
  comment = "kube-state-metrics arguments passed a a dictionary, see the module ./jobs/kube-state-metrics.river for complete list of arguments (default: {})"
  optional = true
  default = {}
}

// node_exporter arguments
argument "node_exporter" {
  comment = "node-exporter arguments passed a a dictionary, see the module ./jobs/node-exporter.river for complete list of arguments (default: {})"
  optional = true
  default = {}
}

// opencost arguments
argument "opencost" {
  comment = "opencost arguments passed a a dictionary, see the module ./jobs/opencost.river for complete list of arguments (default: {})"
  optional = true
  default = {}
}

// agent arguments
argument "agent" {
  comment = "agent arguments passed a a dictionary, see the module ./jobs/grafana-agent.river for complete list of arguments (default: {})"
  optional = true
  default = {}
}

argument "clustering" {
  comment = "Whether or not clustering should be enabled for all modules"
  optional = true
  default = false
}

argument "git_repo" {
  optional = true
  default = coalesce(env("GIT_REPO"), "https://github.com/grafana/agent-modules.git")
}

argument "git_rev" {
  optional = true
  default = coalesce(env("GIT_REV"), env("GIT_REVISION"), env("GIT_BRANCH"), "main")
}

argument "git_pull_freq" {
  optional = true
  default = coalesce(env("GIT_PULL_FREQ"), "0s")
}

// cadvisor job
module.git "cadvisor" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/jobs/cadvisor.river"

  arguments {
    forward_to = argument.forward_to.value
    enabled = coalesce(argument.cadvisor.value["enabled"], null)
    job_label = coalesce(argument.cadvisor.value["job_label"], null)
    keep_metrics = coalesce(argument.cadvisor.value["keep_metrics"], null)
    scrape_interval = coalesce(argument.cadvisor.value["scrape_interval"], null)
    max_cache_size = coalesce(argument.cadvisor.value["max_cache_size"], null)
    clustering = argument.clustering.value
  }
}

// kubelet job
module.git "kubelet" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/jobs/cadvisor.river"

  arguments {
    forward_to = argument.forward_to.value
    enabled = coalesce(argument.kubelet.value["enabled"], null)
    job_label = coalesce(argument.kubelet.value["job_label"], null)
    keep_metrics = coalesce(argument.kubelet.value["keep_metrics"], null)
    scrape_interval = coalesce(argument.kubelet.value["scrape_interval"], null)
    max_cache_size = coalesce(argument.kubelet.value["max_cache_size"], null)
    clustering = argument.clustering.value
  }
}

// kube-state-metrics job
module.git "kube_state_metrics" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/jobs/kube-state-metrics.river"

  arguments {
    forward_to = argument.forward_to.value
    enabled = coalesce(argument.kube_state_metrics.value["enabled"], null)
    namespaces = coalesce(argument.kube_state_metrics.value["namespaces"], null)
    selectors = coalesce(argument.kube_state_metrics.value["selectors"], null)
    port_name = coalesce(argument.kube_state_metrics.value["port_name"], null)
    job_label = coalesce(argument.kubelet.value["job_label"], null)
    keep_metrics = coalesce(argument.kubelet.value["keep_metrics"], null)
    scrape_interval = coalesce(argument.kubelet.value["scrape_interval"], null)
    max_cache_size = coalesce(argument.kubelet.value["max_cache_size"], null)
    clustering = argument.clustering.value
  }
}

// node-exporter job
module.git "node_exporter" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/jobs/node-exporter.river"

  arguments {
    forward_to = argument.forward_to.value
    enabled = coalesce(argument.node_exporter.value["enabled"], null)
    namespaces = coalesce(argument.node_exporter.value["namespaces"], null)
    selectors = coalesce(argument.node_exporter.value["selectors"], null)
    port_name = coalesce(argument.node_exporter.value["port_name"], null)
    job_label = coalesce(argument.node_exporter.value["job_label"], null)
    keep_metrics = coalesce(argument.node_exporter.value["keep_metrics"], null)
    scrape_interval = coalesce(argument.node_exporter.value["scrape_interval"], null)
    max_cache_size = coalesce(argument.node_exporter.value["max_cache_size"], null)
    clustering = argument.clustering.value
  }
}

// agent job
module.git "agent" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/jobs/agent.river"

  arguments {
    forward_to = argument.forward_to.value
    enabled = coalesce(argument.agent.value["enabled"], null)
    namespaces = coalesce(argument.agent.value["namespaces"], null)
    selectors = coalesce(argument.agent.value["selectors"], null)
    port_name = coalesce(argument.agent.value["port_name"], null)
    job_label = coalesce(argument.agent.value["job_label"], null)
    keep_metrics = coalesce(argument.agent.value["keep_metrics"], null)
    scrape_interval = coalesce(argument.agent.value["scrape_interval"], null)
    max_cache_size = coalesce(argument.agent.value["max_cache_size"], null)
    clustering = argument.clustering.value
  }
}

// agent opencost job
module.git "opencost" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/jobs/opencost.river"

  arguments {
    forward_to = argument.forward_to.value
    enabled = coalesce(argument.opencost.value["enabled"], null)
    namespaces = coalesce(argument.opencost.value["namespaces"], null)
    selectors = coalesce(argument.opencost.value["selectors"], null)
    port_name = coalesce(argument.opencost.value["port_name"], null)
    job_label = coalesce(argument.opencost.value["job_label"], null)
    keep_metrics = coalesce(argument.opencost.value["keep_metrics"], null)
    scrape_interval = coalesce(argument.opencost.value["scrape_interval"], null)
    max_cache_size = coalesce(argument.opencost.value["max_cache_size"], null)
    clustering = argument.clustering.value
  }
}
