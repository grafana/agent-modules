/*
Module: log-all
Description: Wrapper module to include all kubernetes logging modules and use cri parsing
*/
argument "forward_to" {
  // comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
	optional = false
}

argument "tenant" {
  // comment = "The tenant to filter logs to.  This does not have to be the tenantId, this is the value to look for in the logs.agent.grafana.com/tenant annotation, and this can be a regex."
  optional = true
  default = ".*"
}

argument "keep_labels" {
  // comment = "List of labels to keep before the log message is written to Loki"
  optional = true
  default = [
    "app",
    "cluster",
    "component",
    "container",
    "deployment",
    "env",
    "filename",
    "instance",
    "job",
    "level",
    "log_type",
    "namespace",
    "region",
    "service",
    "squad",
    "team",
  ]
}

argument "enable_structured_metadata" {
  // comment = "Whether or not to enable structured metadata, this must be enabled and configured in your Loki cluster for this to work, otherwise will result in an error."
  optional = true
  default = false
}

argument "structured_metadata" {
  optional = true
  // comment = "Map of labels/fields to keep before the log message is written to Loki"
  // Docs: https://grafana.com/docs/agent/next/flow/reference/components/loki.process/#stagestructured_metadata-block
  default = {}
}

argument "git_repo" {
  optional = true
  default = coalesce(env("GIT_REPO"), "https://github.com/grafana/agent-modules.git")
}

argument "git_rev" {
  optional = true
  default = coalesce(env("GIT_REV"), env("GIT_REVISION"), env("GIT_BRANCH"), "main")
}

argument "git_pull_freq" {
  // comment = "How often to pull the git repo, the default is 0s which means never pull"
  optional = true
  default = "0s"
}

module.git "log_targets" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/targets/logs-from-worker.river"

  arguments {
    forward_to = [module.git.label_normalize_filename.exports.process.receiver]
    tenant = argument.tenant.value
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

module.git "label_normalize_filename" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/labels/normalize-filename.river"

  arguments {
    // here we fork, one branch goes to the log level module, the other goes to the metrics module
    // this is because we need to reduce the labels on the pre-metrics but they are still necessary in
    // downstream modules
    forward_to = [
      module.git.pre_process_metrics.exports.process.receiver,
      module.git.log_formats_all.exports.process.receiver,
    ]
  }
}

module.git "pre_process_metrics" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/metrics/pre-process-bytes-lines.river"

  arguments {
    forward_to = [] // send nowhere
    keep_labels = argument.keep_labels.value
  }
}

module.git "log_formats_all" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/log-formats/all.river"

  arguments {
    forward_to = [module.git.log_level_default.exports.process.receiver]
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

module.git "log_level_default" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/labels/log-level.river"

  arguments {
    forward_to = [module.git.drop_levels.exports.process.receiver]
  }
}

module.git "drop_levels" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/drops/levels.river"

  arguments {
    forward_to = [module.git.scrub_all.exports.process.receiver]
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

module.git "scrub_all" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/scrubs/all.river"

  arguments {
    forward_to = [module.git.embed_pod.exports.process.receiver]
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

module.git "embed_pod" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/embed/pod.river"

  arguments {
    forward_to = [module.git.mask_all.exports.process.receiver]
  }
}

module.git "mask_all" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/masks/all.river"

  arguments {
    forward_to = [module.git.structured_metadata.exports.process.receiver]
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

// structured metadata must be expliclity enabled in the Loki cluster for this to work
// Docs: https://grafana.com/docs/loki/latest/get-started/labels/structured-metadata/
module.git "structured_metadata" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/metadata.river"

  arguments {
    forward_to = [module.git.label_keep.exports.process.receiver]
    enable_structured_metadata = argument.enable_structured_metadata.value
    structured_metadata = argument.structured_metadata.value
  }
}

module.git "label_keep" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/labels/keep-labels.river"

  arguments {
    forward_to = [module.git.post_process_metrics.exports.process.receiver]
    keep_labels = argument.keep_labels.value
  }
}

module.git "post_process_metrics" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/metrics/post-process-bytes-lines.river"

  arguments {
    forward_to = argument.forward_to.value
  }
}
