// syslog performs log processing for syslog messages.
declare "syslog" {
	argument "forward_to" {
		// comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
		optional = false
	}

	export "process" {
		value = loki.process.log_format_syslog
	}

	loki.process "log_format_syslog" {
		forward_to = argument.forward_to.value

		// check logs.agent.grafana.com/log-format annotation, if the log_type is empty the line hasn't been processed, if it contains postgres then process the line
		stage.match {
			pipeline_name = "pipeline for annotation || logs.agent.grafana.com/log-format: syslog"
			// unescaped regex: ^[A-Za-z]{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}\s+\S+\s+\S+\[\d+\]:\s+.*$
			selector = "{log_type=\"\", logs_agent_grafana_com_log_format=~\"(?i).*(syslog).*\"} |~ \"^[A-Za-z]{3}\\\\s+\\\\d{1,2}\\\\s+\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\s+\\\\S+\\\\s+\\\\S+\\\\[\\\\d+\\\\]:\\\\s+.*$\""

			stage.static_labels {
				values = {
					// set the log_type
					log_type = "syslog",
					level    = "info",
				}
			}

			// check logs.agent.grafana.com/scrub-timestamp annotation, if true remove the timestamp from the log line
			// this can reduce the overall # of bytes sent and stored in Loki
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_timestamp=\"true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-timestamp: true"

				// remove timestamp from the log line
				// unescaped regex: ^[A-Za-z]{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}
				stage.replace {
					expression = "(^[A-Za-z]{3}\\s+\\d{1,2}\\s+\\d{2}:\\d{2}:\\d{2})"
					replace    = ""
				}
			}
		}
	}
}
