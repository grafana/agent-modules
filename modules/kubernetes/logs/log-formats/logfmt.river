// logfmt performs log formatting for logfmt-formatted log lines.
declare "logfmt" {
	argument "forward_to" {
		// comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
		optional = false
	}

	export "process" {
		value = loki.process.log_format_logfmt
	}

	loki.process "log_format_logfmt" {
		forward_to = argument.forward_to.value

		// check logs.agent.grafana.com/log-format annotation, if the log_type is empty the line hasn't been processed, if it contains logfmt and the line matches the format, then process the line as
		// a logfmt (https://github.com/go-logfmt/logfmt)
		stage.match {
			pipeline_name = "pipeline for annotation || logs.agent.grafana.com/log-format: logfmt"
			// unescaped regex: (\w+=("[^"]*"|\S+))(\s+(\w+=("[^"]*"|\S+)))*\s*
			selector = "{log_type=\"\", logs_agent_grafana_com_log_format=~\"(?i).*(logfmt).*\"} |~ \"(\\\\w+=(\\\"[^\\\"]*\\\"|\\\\S+))(\\\\s+(\\\\w+=(\\\"[^\\\"]*\\\"|\\\\S+)))*\\\\s*\""

			// set the log_type
			stage.static_labels {
				values = {
					log_type = "logfmt",
				}
			}

			// while the level could be extracted as logfmt, this allows for multiple possible log levels formats
			// i.e. loglevel=info, level=info, lvl=info, loglvl=info
			stage.regex {
				expression = "(log)?(level|lvl)=\"?(?P<level>\\S+)\"?"
			}

			// set the extracted level value as a label
			stage.labels {
				values = {
					level = "",
				}
			}

			// check logs.agent.grafana.com/scrub-timestamp annotation, if true remove the timestamp from the log line
			// this can reduce the overall # of bytes sent and stored in Loki
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_timestamp=\"true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-timestamp: true"

				// remove timestamp from the log line

				// unescaped regex: ((ts?|timestamp)=\d{4}-\d{2}-\d{2}(T|\s+)\d{2}:\d{2}:\d{2}(\.\d+)?(Z|(\+|-)\d+)?\s+)
				stage.replace {
					expression = "((ts?|timestamp)=[0-9]{4}-[0-9]{2}-[0-9]{2}(T|\\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(Z|(\\+|-)[0-9]+)?\\s+)"
					replace    = ""
				}
			}

			// check logs.agent.grafana.com/scrub-level annotation, if true remove the level from the log line (it is still a label)
			// this can reduce the overall # of bytes sent and stored in Loki
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_level=~\"(?i)true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-level: true"

				// remove level from the log line
				stage.replace {
					// unescaped regex: (log)?(lvl|level)="?[^\s]+\s"?
					expression = "(?i)((log)?(lvl|level)=\"?[^\\s]+\\s\"?)"
					replace    = ""
				}
			}
		}
	}
}
