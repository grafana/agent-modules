// python performs log processing for Python log messages.
declare "python" {
	argument "forward_to" {
		// comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
		optional = false
	}

	export "process" {
		value = loki.process.log_format_python
	}

	loki.process "log_format_python" {
		forward_to = argument.forward_to.value

		// check logs.agent.grafana.com/log-format annotation, if the log_type is empty the line hasn't been processed, if it contains python-json and the line matches the format, then process the line as python-json
		stage.match {
			pipeline_name = "pipeline for annotation || logs.agent.grafana.com/log-format: python-json"
			selector      = "{log_type=\"\", logs_agent_grafana_com_log_format=~\"(?i).*(python-?json).*\"} |~ \"^\\\\s*\\\\{.+\\\\}\\\\s*$\""

			// set the log_type
			stage.static_labels {
				values = {
					log_type = "python",
				}
			}

			// extract the level, response_code, method if they exist
			stage.json {
				expressions = {
					level   = "level || lvl || loglevel || log_level || logLevel || log_lvl || logLvl || levelname || levelName",
					process = "processName || process_name || process",
					module  = "module || moduleName || module_name",
					func    = "funcName || func_name || func",
				}
			}

			// set the extracted level, process, module and func as labels
			stage.labels {
				values = {
					level   = "",
					process = "",
					module  = "",
					func    = "",
				}
			}

			// check logs.agent.grafana.com/scrub-timestamp annotation, if true remove the timestamp from the log line
			// this can reduce the overall # of bytes sent and stored in Loki
			// remove timestamp from the log line, depending on the entry it can be "start_time" or "time"
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_timestamp=\"true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-timestamp: true"

				// remove timestamp from the log line
				// unescaped regex: (?i)("(@?timestamp|asctime)"\s*:\s*\[?"[^"]+"\]?,?)
				stage.replace {
					expression = "(?i)(\"(@?timestamp|asctime)\"\\s*:\\s*\\[?\"[^\"]+\"\\]?,?)"
					replace    = ""
				}
			}

			// check logs.agent.grafana.com/scrub-level annotation, if true remove the level from the log line (it is still a label)
			// this can reduce the overall # of bytes sent and stored in Loki
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_level=~\"(?i)true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-level: true"

				// remove level from the log line
				stage.replace {
					// unescaped regex: (?i)"(log)?(level|lvl)(name)?"\s*:\s*"[^"]+",?
					expression = "(?i)(\"(log)?(level|lvl)(name)?\"\\s*:\\s*\"[^\"]+\",?)"
					replace    = ""
				}
			}
		}
	}
}
