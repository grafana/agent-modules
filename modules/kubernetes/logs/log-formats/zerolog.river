// zerolog performs log processing for zerolog-formatted log lines.
declare "zerolog" {
	argument "forward_to" {
		// comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
		optional = false
	}

	export "process" {
		value = loki.process.log_format_zerolog
	}

	loki.process "log_format_zerolog" {
		forward_to = argument.forward_to.value

		// check logs.agent.grafana.com/log-format annotation, if the log_type is empty the line hasn't been processed, if it contains postgres then process the line
		stage.match {
			pipeline_name = "pipeline for annotation || logs.agent.grafana.com/log-format: zerolog"
			// unescaped regex: ^.+(TRC|DBG|INF|WRN|ERR|FTL|PNC)[^=]+(\w+=("[^"]*"|\S+))(\s+(\w+=("[^"]*"|\S+)))*\s*$
			selector = "{log_type=\"\", logs_agent_grafana_com_log_format=~\"(?i).*(zero-?log).*\"} |~ \"^.+(TRC|DBG|INF|WRN|ERR|FTL|PNC)[^=]+(\\\\w+=(\\\"[^\\\"]*\\\"|\\\\S+))(\\\\s+(\\\\w+=(\\\"[^\\\"]*\\\"|\\\\S+)))*\\\\s*$\""

			// set the log_type
			stage.static_labels {
				values = {
					log_type = "zerolog",
				}
			}

			// extract the level from the log
			// unescaped regex: (?P<timestamp>[0-9]{4}-[0-9]{2}-[0-9]{2}(T|\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]+[^ ]*\s+)(?P<level>(TRC|DBG|INF|WRN|ERR|FTL|PNC)).+
			stage.regex {
				expression = "(?P<timestamp>[0-9]{4}-[0-9]{2}-[0-9]{2}(T|\\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]+[^ ]*\\s+)(?P<level>(TRC|DBG|INF|WRN|ERR|FTL|PNC)).+"
			}

			// if the extracted level is TRC set trace
			stage.replace {
				source     = "level"
				expression = "(TRC)"
				replace    = "trace"
			}

			// if the extracted level is DBG set debug
			stage.replace {
				source     = "level"
				expression = "(DBG)"
				replace    = "debug"
			}

			// if the extracted level is INF set info
			stage.replace {
				source     = "level"
				expression = "(INF)"
				replace    = "info"
			}

			// if the extracted level is WRN set warn
			stage.replace {
				source     = "level"
				expression = "(WRN)"
				replace    = "warn"
			}

			// if the extracted level is ERR set error
			stage.replace {
				source     = "level"
				expression = "(ERR)"
				replace    = "error"
			}

			// if the extracted level is FTL set fatal
			stage.replace {
				source     = "level"
				expression = "(FTL)"
				replace    = "fatal"
			}

			// if the extracted level is PNC set panic
			stage.replace {
				source     = "level"
				expression = "(PNC)"
				replace    = "panic"
			}

			// set the extracted level as a labels
			stage.labels {
				values = {
					level = "",
				}
			}

			// check logs.agent.grafana.com/scrub-timestamp annotation, if true remove the timestamp from the log line
			// this can reduce the overall # of bytes sent and stored in Loki
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_timestamp=\"true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-timestamp: true"

				// remove timestamp from the log line

				// unescaped regex: ([0-9]{4}-[0-9]{2}-[0-9]{2}(T|\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]+[^ ]*\s+)
				stage.replace {
					expression = "([0-9]{4}-[0-9]{2}-[0-9]{2}(T|\\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]+[^ ]*\\s+)"
					replace    = ""
				}
			}

			// check logs.agent.grafana.com/scrub-level annotation, if true remove the level from the log line (it is still a label)
			// this can reduce the overall # of bytes sent and stored in Loki
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_level=~\"(?i)true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-level: true"

				// remove level from the log line
				stage.replace {
					// unescaped regex: (TRC|DBG|INF|WRN|ERR|FTL|PNC)\s+
					expression = "(TRC|DBG|INF|WRN|ERR|FTL|PNC)\\s+"
					replace    = ""
				}
			}
		}
	}
}
