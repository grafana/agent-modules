// spring_boot performs log processing for Spring Boot applications:
//
// https://docs.spring.io/spring-boot/docs/2.1.13.RELEASE/reference/html/boot-features-logging.html
declare "spring_boot" {
	argument "forward_to" {
		// comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
		optional = false
	}

	export "process" {
		value = loki.process.log_format_spring_boot
	}

	loki.process "log_format_spring_boot" {
		forward_to = argument.forward_to.value

		// check logs.agent.grafana.com/log-format annotation, if the log_type is empty the line hasn't been processed, if it contains springboot and the line matches the format, then process the line as spring-boot
		stage.match {
			pipeline_name = "pipeline for annotation || logs.agent.grafana.com/log-format: spring-boot"
			// unescaped regex: ^\d{4}.+(INFO|ERROR|WARN|DEBUG|TRACE)\s+\d+\s+[^\[]+\[\S+\]\s+\S+\s+:\s+.*$
			selector = "{log_type=\"\", logs_agent_grafana_com_log_format=~\"(?i).*(spring-?boot).*\"} |~ \"^\\\\d{4}.+(INFO|ERROR|WARN|DEBUG|TRACE)\\\\s+\\\\d+\\\\s+[^\\\\[]+\\\\[\\\\S+\\\\]\\\\s+\\\\S+\\\\s+:\\\\s+.*$\""

			// set the log_type
			stage.static_labels {
				values = {
					log_type = "spring-boot",
				}
			}

			// extract the timestamp, level, traceId, spanId, processId, thread, logger from the log line
			stage.regex {
				// unescaped regex: (?P<timestamp>[0-9]{4}-[0-9]{2}-[0-9]{2}(T|\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]+)?)\s+(?P<level>\w+)\s+(?P<trace>\[(\S*\-?),(?P<traceId>\S*),(?P<spanId>\S*)\])\s+(?P<processId>[0-9]+)\s+-+\s+\[\s*(?P<thread>\S+)\]\s+(?P<logger>\S+)\s+:\s+(?P<message>.+)
				expression = "(?P<timestamp>[0-9]{4}-[0-9]{2}-[0-9]{2}(T|\\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?)\\s+(?P<level>\\w+)\\s+(?P<trace>\\[(\\S*\\-?),(?P<traceId>\\S*),(?P<spanId>\\S*)\\])\\s+(?P<processId>[0-9]+)\\s+-+\\s+\\[\\s*(?P<thread>\\S+)\\]\\s+(?P<logger>\\S+)\\s+:\\s+(?P<message>.+)"
			}

			// set the extracted values as labels so they can be used by downstream components, most likely several labels
			// will be dropped before being written to Loki
			stage.labels {
				values = {
					level     = "",
					trace     = "",
					traceId   = "",
					spanId    = "",
					processId = "",
					thread    = "",
					logger    = "",
				}
			}

			// check logs.agent.grafana.com/scrub-timestamp annotation, if true remove the timestamp from the log line
			// this can reduce the overall # of bytes sent and stored in Loki
			// remove timestamp from the log line, depending on the entry it can be "start_time" or "time"
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_timestamp=\"true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-timestamp: true"

				// remove timestamp from the log line
				// unescaped regex: ^([0-9]{4}-[0-9]{2}-[0-9]{2}(T|\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]+)?(Z|(\+|-)[0-9:]+)?)\s+
				stage.replace {
					expression = "^([0-9]{4}-[0-9]{2}-[0-9]{2}(T|\\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(Z|(\\+|-)[0-9:]+)?)\\s+"
					replace    = ""
				}
			}

			// check logs.agent.grafana.com/scrub-level annotation, if true remove the level from the log line (it is still a label)
			// this can reduce the overall # of bytes sent and stored in Loki
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_level=~\"(?i)true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-level: true"

				// remove level from the log line
				stage.replace {
					// unescaped regex: (ERROR|WARN|INFO|DEBUG|TRACE)\s+
					expression = "(ERROR|WARN|INFO|DEBUG|TRACE)\\s+"
					replace    = ""
				}
			}
		}
	}
}
