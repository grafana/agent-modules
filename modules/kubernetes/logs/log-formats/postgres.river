// postgres performs log processing for Postgres logs.
declare "postgres" {
	argument "forward_to" {
		// comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
		optional = false
	}

	export "process" {
		value = loki.process.log_format_postgres
	}

	loki.process "log_format_postgres" {
		forward_to = argument.forward_to.value

		// check logs.agent.grafana.com/log-format annotation, if the log_type is empty the line hasn't been processed, if it contains postgres then process the line
		stage.match {
			pipeline_name = "pipeline for annotation || logs.agent.grafana.com/log-format: postgres"
			selector      = "{log_type=\"\", logs_agent_grafana_com_log_format=~\"(?i).*(postgres).*\"}"

			// set the log_type
			stage.static_labels {
				values = {
					log_type = "postgres",
				}
			}

			// extract the level and process_id from the log
			// unescaped regex: \[?(?P<timestamp>\d{4}-\d{2}-\d{2}(T|\s+)\d{2}:\d{2}:\d{2}.\d+\s+\w+)\]?\s+(\[(?P<process_id>\d+)\]\s+|.+)(?P<level>(INFO|NOTICE|WARNING|ERROR|LOG|FATAL|PANIC|DEBUG)\d*):\s*
			stage.regex {
				expression = "\\[?(?P<timestamp>\\d{4}-\\d{2}-\\d{2}(T|\\s+)\\d{2}:\\d{2}:\\d{2}.\\d+\\s+\\w+)\\]?\\s+(\\[(?P<process_id>\\d+)\\]\\s+|.+)(?P<level>(INFO|NOTICE|WARNING|ERROR|LOG|FATAL|PANIC|DEBUG)\\d*):\\s*"
			}

			// set the extracted level and process_id as labels
			stage.labels {
				values = {
					level      = "",
					process_id = "",
				}
			}

			// check logs.agent.grafana.com/scrub-timestamp annotation, if true remove the timestamp from the log line
			// this can reduce the overall # of bytes sent and stored in Loki
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_timestamp=\"true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-timestamp: true"

				// remove timestamp from the log line

				// unescaped regex: (\[?[0-9]{4}-[0-9]{2}-[0-9]{2}(T|\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]+\s+\w+\]?)
				stage.replace {
					expression = "(\\[?[0-9]{4}-[0-9]{2}-[0-9]{2}(T|\\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]+\\s+\\w+\\]?)"
					replace    = ""
				}
			}

			// check logs.agent.grafana.com/scrub-level annotation, if true remove the level from the log line (it is still a label)
			// this can reduce the overall # of bytes sent and stored in Loki
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_level=~\"(?i)true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-level: true"

				// remove level from the log line
				stage.replace {
					// unescaped regex: ((INFO|NOTICE|WARNING|ERROR|LOG|FATAL|PANIC|DEBUG)\d*:\s+)
					expression = "((INFO|NOTICE|WARNING|ERROR|LOG|FATAL|PANIC|DEBUG)\\d*:\\s+)"
					replace    = ""
				}
			}
		}
	}
}
