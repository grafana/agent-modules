// klog performs log processing for kubernetes/klog messages:
//
// https://github.com/kubernetes/klog
//
// klog is used by applications such as kube-state-metrics.
declare "klog" {
	argument "forward_to" {
		// comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
		optional = false
	}

	export "process" {
		value = loki.process.log_format_klog
	}

	loki.process "log_format_klog" {
		forward_to = argument.forward_to.value

		// check logs.agent.grafana.com/log-format annotation, if the log_type is empty the line hasn't been processed, if it contains klog and the line matches the format, then process the line as
		// a klog (https://github.com/kubernetes/klog)
		stage.match {
			pipeline_name = "pipeline for annotation || logs.agent.grafana.com/log-format: klog"
			// unescaped regex: ^[IWED]\d+\s+\d{2}:\d{2}:\d{2}\.\d+\s+\d+\s+\S+:\d+\]\s+.*$
			selector = "{log_type=\"\", logs_agent_grafana_com_log_format=~\"(?i).*(klog).*\"} |~ \"^[IWED]\\\\d+\\\\s+\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d+\\\\s+\\\\d+\\\\s+\\\\S+:\\\\d+\\\\]\\\\s+.*$\""

			// set the log_type
			stage.static_labels {
				values = {
					log_type = "klog",
				}
			}

			// extract log level, klog uses a single letter code for the level followed by the month and day i.e. I0119
			stage.regex {
				expression = "((?P<level>[A-Z])[0-9])"
			}

			// extract log level, klog uses a single letter code for the level followed by the month and day i.e. I0119
			stage.regex {
				expression = "((?P<level>[A-Z])[0-9])"
			}

			// if the extracted level is I set INFO
			stage.replace {
				source     = "level"
				expression = "(I)"
				replace    = "INFO"
			}

			// if the extracted level is W set WARN
			stage.replace {
				source     = "level"
				expression = "(W)"
				replace    = "WARN"
			}

			// if the extracted level is E set ERROR
			stage.replace {
				source     = "level"
				expression = "(E)"
				replace    = "ERROR"
			}

			// if the extracted level is D set DEBUG
			stage.replace {
				source     = "level"
				expression = "(D)"
				replace    = "DEBUG"
			}

			// set the extracted level to be a label
			stage.labels {
				values = {
					level = "",
				}
			}

			// check logs.agent.grafana.com/scrub-timestamp annotation, if true remove the timestamp from the log line
			// this can reduce the overall # of bytes sent and stored in Loki
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_timestamp=\"true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-timestamp: true"

				// remove timestamp from the log line

				// unescaped regex: ([0-9]{4}\s+[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]+\s+)
				stage.replace {
					expression = "([0-9]{4}\\s+[0-9]{2}:[0-9]{2}:[0-9]{2}\\.[0-9]+\\s+)"
					replace    = ""
				}
			}

			// check logs.agent.grafana.com/scrub-level annotation, if true remove the level from the log line (it is still a label)
			// this can reduce the overall # of bytes sent and stored in Loki
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_level=~\"(?i)true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-level: true"

				// remove level from the log line
				stage.replace {
					// unescaped regex: (log)?(lvl|level)="?[^\s]+\s"?
					expression = "(^(I|W|E|D))"
					replace    = ""
				}
			}
		}
	}
}
