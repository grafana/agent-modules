// log4j performs log processing for log4j-formatted log lines:
//
// https://logging.apache.org/log4j/2.x/manual/layouts.html#json-template-layout
// https://github.com/logstash/log4j-jsonevent-layout
declare "log4j" {
	argument "forward_to" {
		// comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
		optional = false
	}

	export "process" {
		value = loki.process.log_format_log4j
	}

	loki.process "log_format_log4j" {
		forward_to = argument.forward_to.value

		// check logs.agent.grafana.com/log-format annotation, if the log_type is empty the line hasn't been processed, if it contains log4j-json and the line matches the format, then process the line as log4j-json
		stage.match {
			pipeline_name = "pipeline for annotation || logs.agent.grafana.com/log-format: log4j-json"
			selector      = "{logs_agent_grafana_com_log_format=~\"(?i).*(log4j-?json).*\"} |~ \"^\\\\s*\\\\{.+\\\\}\\\\s*$\""

			// set the log_type
			stage.static_labels {
				values = {
					log_type = "log4j",
				}
			}

			stage.json {
				expressions = {
					level     = "level",
					thread    = "thread_name",
					logger    = "logger_name",
					class     = "class",
					timestamp = "[\"@timestamp\"]",
				}
			}

			// set the extracted values as labels so they can be used by downstream components, most likely several labels
			// will be dropped before being written to Loki
			stage.labels {
				values = {
					level     = "",
					thread    = "",
					logger    = "",
					class     = "",
					timestamp = "",
				}
			}

			// check logs.agent.grafana.com/scrub-timestamp annotation, if true remove the timestamp from the log line
			// this can reduce the overall # of bytes sent and stored in Loki
			// remove timestamp from the log line, depending on the entry it can be "start_time" or "time"
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_timestamp=\"true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-timestamp: true"

				// remove timestamp from the log line
				// unescaped regex: (?i)("@?timestamp"\s*:\s*"[^"]+",)
				stage.replace {
					expression = "(?i)(\"@?timestamp\"\\s*:\\s*\"[^\"]+\",)"
					replace    = ""
				}
			}

			// check logs.agent.grafana.com/scrub-level annotation, if true remove the level from the log line (it is still a label)
			// this can reduce the overall # of bytes sent and stored in Loki
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_level=~\"(?i)true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-level: true"

				// remove level from the log line
				stage.replace {
					// unescaped regex: ("level"\s*:\s*"[^"]+",)
					expression = "(\"level\"\\s*:\\s*\"[^\"]+\",)"
					replace    = ""
				}
			}
		}

		// check logs.agent.grafana.com/log-format annotation, if the log_type is empty the line hasn't been processed, if it contains log4j-text and the line matches the format, then process the line as log4j-text
		stage.match {
			pipeline_name = "pipeline for annotation || logs.agent.grafana.com/log-format: log4j-text"
			// unescaped regex: ^\d{4}[^\[]+\[\S+\]\s+\w+\s+\S+\s+-\s+.*$
			selector = "{log_type=\"\", logs_agent_grafana_com_log_format=~\"(?i).*(log4j(-?te?xt)?).*\"} |~ \"^\\\\d{4}[^\\\\[]+\\\\[\\\\S+\\\\]\\\\s+\\\\w+\\\\s+\\\\S+\\\\s+-\\\\s+.*$\""

			// set the log_type
			stage.static_labels {
				values = {
					log_type = "log4j",
				}
			}

			// extract the timestamp, level, traceId, spanId, processId, thread, logger from the log line
			stage.regex {
				// unescaped regex: (?P<timestamp>[0-9]{4}-[0-9]{2}-[0-9]{2}(T|\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]+)?(Z|(\+|-)[0-9]+)?)\s+(?P<level>\w+)\s+\[(?P<thread>[^]]+)\]
				expression = "(?P<timestamp>[0-9]{4}-[0-9]{2}-[0-9]{2}(T|\\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(Z|(\\+|-)[0-9]+)?)\\s+(?P<level>\\w+)\\s+\\[(?P<thread>[^]]+)\\]"
			}

			// set the extracted values as labels so they can be used by downstream components, most likely several labels
			// will be dropped before being written to Loki
			stage.labels {
				values = {
					level  = "",
					thread = "",
				}
			}

			// check logs.agent.grafana.com/scrub-timestamp annotation, if true remove the timestamp from the log line
			// this can reduce the overall # of bytes sent and stored in Loki
			// remove timestamp from the log line, depending on the entry it can be "start_time" or "time"
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_timestamp=\"true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-timestamp: true"

				// remove timestamp from the log line
				// unescaped regex: ([0-9]{4}-[0-9]{2}-[0-9]{2}(T|\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]+)?(Z|(\+|-)[0-9]+)?)
				stage.replace {
					expression = "([0-9]{4}-[0-9]{2}-[0-9]{2}(T|\\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(Z|(\\+|-)[0-9]+)?)"
					replace    = ""
				}
			}

			// check logs.agent.grafana.com/scrub-level annotation, if true remove the level from the log line (it is still a label)
			// this can reduce the overall # of bytes sent and stored in Loki
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_level=~\"(?i)true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-level: true"

				// remove level from the log line
				stage.replace {
					// unescaped regex: (\[?(DEBUG|INFO|WARN|ERROR|FATAL|TRACE)\]\s*)
					expression = "(\\[?(DEBUG|INFO|WARN|ERROR|FATAL|TRACE)\\]\\s*)"
					replace    = ""
				}
			}
		}
	}
}
