// otel performs log processing for OpenTelemetry-formatted log lines.
declare "otel" {
	argument "forward_to" {
		// comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
		optional = false
	}

	export "process" {
		value = loki.process.log_format_otel
	}

	loki.process "log_format_otel" {
		forward_to = argument.forward_to.value

		// check logs.agent.grafana.com/log-format annotation, if the log_type is empty the line hasn't been processed, if it contains otel and the line matches the format, then process the line as otel
		stage.match {
			pipeline_name = "pipeline for annotation || logs.agent.grafana.com/log-format: otel"
			selector      = "{log_type=\"\", logs_agent_grafana_com_log_format=~\"(?i).*((otel|open-?telemetry)(-?json)).*\"} |~ \"^\\\\s*\\\\{.+\\\\}\\\\s*$\""

			// set the log_type
			stage.static_labels {
				values = {
					log_type = "otel",
				}
			}

			// extract the SeverityText (level), and service.name
			// Docs: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/README.md#service
			stage.json {
				expressions = {
					level   = "SeverityText",
					service = "Resource.\"service.name\"",
				}
			}

			// set the extracted level and service as labels
			stage.labels {
				values = {
					level   = "",
					service = "",
				}
			}

			// check logs.agent.grafana.com/scrub-timestamp annotation, if true remove the timestamp from the log line
			// this can reduce the overall # of bytes sent and stored in Loki
			// remove timestamp from the log line, depending on the entry it can be "start_time" or "time"
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_timestamp=\"true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-timestamp: true"

				// remove timestamp from the log line
				// unescaped regex: ("Timestamp"\s*:\s*"[^"]+",)
				stage.replace {
					expression = "(\"Timestamp\"\\s*:\\s*\"[^\"]+\",)"
					replace    = ""
				}
			}

			// check logs.agent.grafana.com/scrub-level annotation, if true remove the level from the log line (it is still a label)
			// this can reduce the overall # of bytes sent and stored in Loki
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_level=~\"(?i)true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-level: true"

				// remove level from the log line
				stage.replace {
					// unescaped regex: ("SeverityText"\s*:\s*"[^"]+",)
					expression = "(?i)(\"SeverityText\"\\s*:\\s*\"[^\"]+\",)"
					replace    = ""
				}
			}
		}
	}
}
