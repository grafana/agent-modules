// clf performs log processing for Nginx common log:
//
// https://www.w3.org/Daemon/User/Config/Logging.html#common-logfile-format
declare "clf" {
	argument "forward_to" {
		// comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
		optional = false
	}

	export "process" {
		value = loki.process.log_format_clf
	}

	loki.process "log_format_clf" {
		forward_to = argument.forward_to.value

		// check logs.agent.grafana.com/log-format annotation, if the log_type is empty the line hasn't been processed, if it contains clf and the line matches the format, then process the line as clf
		stage.match {
			pipeline_name = "pipeline for annotation || logs.agent.grafana.com/log-format: clf"
			// unescaped regex: \S+\s+\S+\s+\S+\s+\[\S+\s+\S+\]\s+"[^"]+"\s+\d+\s+\d+
			selector = "{log_type=\"\", logs_agent_grafana_com_log_format=~\"(?i).*((apache|nginx|common-?log|clf)).*\"} |~ \"^\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\[\\\\S+\\\\s+\\\\S+\\\\]\\\\s+\\\"[^\\\"]+\\\"\\\\s+\\\\d+\\\\s+\\\\d+$\""

			// clf doesn't have a log level, set default to info, set the log_type
			stage.static_labels {
				values = {
					level    = "info",
					log_type = "clf",
				}
			}

			// extract the http response code and request method as they might want to be used as labels
			stage.regex {
				// unescaped regex: (?P<response_code>\d{3}) "(?P<request_method>\S+)
				expression = "(?P<response_code>[0-9]{3}) \"(?P<request_method>\\S+)"
			}

			// set the extracted response code and request method as labels
			stage.labels {
				values = {
					response_code  = "",
					request_method = "",
				}
			}

			// check to see if the string failed is found in the log line, if so set the level to error
			stage.match {
				selector = "{logs_agent_grafana_com_log_format=~\"(?i)(apache|nginx|common-log|clf)\"} |~ \" (failed|error) \""

				stage.static_labels {
					values = {
						level = "error",
					}
				}
			}

			// check logs.agent.grafana.com/scrub-timestamp annotation, if true remove the timestamp from the log line
			// this can reduce the overall # of bytes sent and stored in Loki
			stage.match {
				selector      = "{logs_agent_grafana_com_scrub_timestamp=\"true\"}"
				pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-timestamp: true"

				// remove timestamp from the log line
				// unescaped regex: (\[([^\]]+)\])
				stage.replace {
					expression = "(\\[([^\\]]+)\\])"
					replace    = ""
				}
			}
		}
	}
}
