/*
Module: pre-process-lines-bytes-metrics
Description: Generates metrics for the number of lines and bytes in the log line before any processing is done
*/
argument "forward_to" {
  // comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
  optional = false
}

argument "keep_labels" {
  optional = true
  // comment = "List of labels to keep before the log message is written to Loki"
  default = [
    "app",
    "cluster",
    "component",
    "container",
    "deployment",
    "env",
    "filename",
    "instance",
    "job",
    "level",
    "log_type",
    "namespace",
    "region",
    "service",
    "squad",
    "team",
  ]
}

argument "git_repo" {
  optional = true
  default = coalesce(env("GIT_REPO"), "https://github.com/grafana/agent-modules.git")
}

argument "git_rev" {
  optional = true
  default = coalesce(env("GIT_REV"), env("GIT_REVISION"), env("GIT_BRANCH"), "main")
}

argument "git_pull_freq" {
  // comment = "How often to pull the git repo, the default is 0s which means never pull"
  optional = true
  default = "0s"
}

export "process" {
  value = module.git.label_keep
}

// drop any labels that are not in the keep_labels list
// this is because the metrics generated below will keep the full set of labels currently attached to the log line
// we want those to line up with what we're keeping
module.git "label_keep" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/labels/keep-labels.river"

  arguments {
    forward_to = [loki.process.pre_process_lines_bytes_metrics.receiver]
    keep_labels = argument.keep_labels.value
  }
}

loki.process "pre_process_lines_bytes_metrics" {
  forward_to = [] // does not forward anywhere, just generates metrics

  stage.label_drop {
    values = ["log_type"]
  }

  stage.metrics {
    metric.counter {
      name = "lines_pre_total"
      description = "total number of log lines ingested before processing"
      prefix = "log_"
      match_all = true
      action = "inc"
      max_idle_duration = "24h"
    }
  }

  stage.metrics {
      metric.counter {
        name = "bytes_pre_total"
      description = "total number of log bytes ingested before processing"
        prefix = "log_"
        match_all = true
        count_entry_bytes = true
        action = "add"
        max_idle_duration = "24h"
      }
  }

}
